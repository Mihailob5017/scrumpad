{"version":3,"sources":["graphql/queries.js","components/status/status.js","components/status/status-container.js","components/button/button.js","components/task/task.js","components/empty/empty.js","components/category/category.js","helper/helper-functions.js","pages/homepage/homepage.js","components/loader/loader.js","components/error/error.js","pages/homepage/homepage-container.js","components/issue/single-issue.js","components/issue/single-issue-container.js","pages/issues/issue.js","pages/issues/issue-container.js","components/input/input.js","components/add-issue/add-issue.js","components/add-issue/add-issue-container.js","components/add-task/add-task.js","components/add-task/add-task-container.js","pages/add/addpage.js","components/header/header.js","App.js","index.js"],"names":["GET_TASKS_QUERY","gql","CHANGE_TASK_STATUS","GET_ALL_ISSUES_QUERY","GET_SPECIFIC_ISSUE_QUERY","CLOSE_SPECIFIC_ISSUE","OPEN_NEW_ISSUE","OPEN_NEW_TASK","Status","id","status","changeStatus","useState","state","className","value","onChange","e","obj","target","StatusContainer","useMutation","ChangeTaskStatus","variables","refetchQueries","query","button","executable","isLink","location","children","to","onClick","task","name","description","openedBy","isOpen","Empty","category","props","tasks","length","map","i","key","getLastArg","route","arg","split","getAllIssues","data","IssueArr","Array","isArray","issues","getId","homepage","allTasks","filterObj","open","active","finished","closed","push","filterTasksByCategory","loader","error","console","log","HomepageContainer","useQuery","loading","SingleIssue","closeIssueExec","taskId","SingleIssueContainer","CloseIssue","Issue","isAddVisiable","issue","withRouter","res","returnIssueQuery","pathname","input","inputColor","isTextarea","handleChange","label","otherProps","htmlFor","style","border","borderBottom","type","AddIssue","color","OpenIssue","setName","desc","setDesc","placeholder","alert","AddIssueContainer","variableObj","AddTask","OpenTaskExec","username","setUsername","AddTaskContainer","OpenTask","Route","header","Client","ApolloClient","uri","App","client","exact","path","component","Homepage","Issuepage","Addpage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97a6f742.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\r\n\r\nexport const GET_TASKS_QUERY = gql`\r\n  {\r\n    tasks {\r\n      id\r\n      name\r\n      description\r\n      openedBy\r\n      status\r\n      isOpen\r\n      issues {\r\n        name\r\n        description\r\n        isOpen\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CHANGE_TASK_STATUS = gql`\r\n  mutation ChangeTaskStatus($id: String!, $status: String!) {\r\n    changeTaskStatus(id: $id, status: $status) {\r\n      id\r\n      name\r\n      description\r\n      openedBy\r\n      status\r\n      isOpen\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_ALL_ISSUES_QUERY = gql`\r\n  {\r\n    tasks {\r\n      id\r\n      issues {\r\n        id\r\n        name\r\n        description\r\n        isOpen\r\n        taskId\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_SPECIFIC_ISSUE_QUERY = gql`\r\n  query Task($id: ID!) {\r\n    task(id: $id) {\r\n      id\r\n      issues {\r\n        id\r\n        name\r\n        description\r\n        isOpen\r\n        taskId\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CLOSE_SPECIFIC_ISSUE = gql`\r\n  mutation CloseIssue($id: ID!) {\r\n    closeIssue(id: $id) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const OPEN_NEW_ISSUE = gql`\r\n  mutation OpenIssue(\r\n    $name: String\r\n    $description: String\r\n    $taskId: String\r\n    $isOpen: Boolean\r\n  ) {\r\n    openIssue(\r\n      name: $name\r\n      description: $description\r\n      taskId: $taskId\r\n      isOpen: $isOpen\r\n    ) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const OPEN_NEW_TASK = gql`\r\n  mutation OpenTask(\r\n    $name: String\r\n    $description: String\r\n    $openedBy: String\r\n    $status: String\r\n    $isOpen: Boolean\r\n  ) {\r\n    openTask(\r\n      name: $name\r\n      description: $description\r\n      openedBy: $openedBy\r\n      status: $status\r\n      isOpen: $isOpen\r\n    ) {\r\n      name\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from 'react';\r\nimport './status.style.scss';\r\nconst Status = ({ id, status, changeStatus }) => {\r\n  const [state] = useState(status);\r\n\r\n  return (\r\n    <select\r\n      className=\"status_container\"\r\n      value={state}\r\n      onChange={e => {\r\n        const obj = { id: id, status: e.target.value };\r\n        changeStatus(obj);\r\n      }}\r\n    >\r\n      <option className=\"status_option\" value=\"open\">\r\n        Open\r\n      </option>\r\n      <option className=\"status_option\" value=\"active\">\r\n        Active\r\n      </option>\r\n      <option className=\"status_option\" value=\"finished\">\r\n        Finished\r\n      </option>\r\n      <option className=\"status_option\" value=\"closed\">\r\n        Closed\r\n      </option>\r\n    </select>\r\n  );\r\n};\r\n\r\nexport default Status;\r\n","import React from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { CHANGE_TASK_STATUS, GET_TASKS_QUERY } from '../../graphql/queries';\r\nimport Status from './status';\r\nconst StatusContainer = ({ status, id }) => {\r\n  const [ChangeTaskStatus] = useMutation(CHANGE_TASK_STATUS);\r\n \r\n  const changeStatus = value => {\r\n    ChangeTaskStatus({\r\n      variables: { id: value.id, status: value.status },\r\n      refetchQueries: [{ query: GET_TASKS_QUERY }]\r\n    });\r\n  };\r\n\r\n  return <Status status={status} id={id} changeStatus={changeStatus} />;\r\n};\r\n\r\nexport default StatusContainer;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './button.style.scss';\r\nconst button = ({ executable, isLink, location, children }) => {\r\n  return (\r\n    <div className=\"button-component_container\">\r\n      {isLink ? (\r\n        <h1 className=\"button-link_container\">\r\n          <Link className=\"button-link_link\" to={location}>\r\n            {children}\r\n          </Link>\r\n        </h1>\r\n      ) : (\r\n        <button className=\"button_component_btn\" onClick={executable}>\r\n          {children}\r\n        </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default button;\r\n","import React from 'react';\r\nimport Status from '../status/status-container';\r\nimport CustomBtn from '../button/button';\r\nimport './task.style.scss';\r\n\r\nconst task = ({ id, name, description, openedBy, status, isOpen }) => {\r\n  return (\r\n    <div className=\"task-component_container\">\r\n      {!isOpen && (\r\n        <div className=\"task-component-overlay\">\r\n          <h1 className=\"overlay-txt\">Closed</h1>\r\n        </div>\r\n      )}\r\n      <div className=\"task-component_header\">\r\n        <h2>Name:{name}</h2>\r\n        <h2>Posted By:{openedBy}</h2>\r\n      </div>\r\n\r\n      <div className=\"task-component_body\">Description: {description}</div>\r\n      <div className=\"task-component_footer\">\r\n        <Status status={status} id={id} />\r\n        <CustomBtn isLink={true} location={`/issues/${id}`}>\r\n          View Issues\r\n        </CustomBtn>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default task;\r\n","import React from 'react';\r\nimport './empty.style.scss';\r\nconst Empty = ({ children }) => (\r\n  <div className=\"empty\">No {children} Assigned Here</div>\r\n);\r\n\r\nexport default Empty;\r\n","import React from 'react';\r\nimport Task from '../task/task';\r\nimport Empty from '../empty/empty';\r\nimport './category.style.scss';\r\nconst category = props => {\r\n  const { tasks, name } = props;\r\n  return (\r\n    <div className=\"category-component_container\">\r\n      <h1 className=\"category-component_header\">{name}</h1>\r\n      <div className=\"category-component_body\">\r\n        {tasks.length > 0 ? (\r\n          tasks.map((task, i) => <Task key={i} {...task} />)\r\n        ) : (\r\n          <Empty>Tasks</Empty>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default category;\r\n","import {\r\n  GET_ALL_ISSUES_QUERY,\r\n  GET_SPECIFIC_ISSUE_QUERY\r\n} from '../graphql/queries';\r\nexport const filterTasksByCategory = allTasks => {\r\n  const filterObj = {\r\n    open: [],\r\n    active: [],\r\n    finished: [],\r\n    closed: []\r\n  };\r\n  for (let task of allTasks) {\r\n    if (task.status === 'open') filterObj.open.push(task);\r\n    if (task.status === 'active') filterObj.active.push(task);\r\n    if (task.status === 'finished') filterObj.finished.push(task);\r\n    if (task.status === 'closed') filterObj.closed.push(task);\r\n  }\r\n\r\n  return filterObj;\r\n};\r\n\r\nexport const getLastArg = route => {\r\n  const arg = route.split('/');\r\n  return arg[arg.length - 1];\r\n};\r\n\r\nexport const returnIssueQuery = arg => {\r\n  const res = getLastArg(arg);\r\n  if (res === 'issues') return { query: GET_ALL_ISSUES_QUERY, id: '' };\r\n  else return { query: GET_SPECIFIC_ISSUE_QUERY, id: res };\r\n};\r\n\r\nexport const getAllIssues = data => {\r\n  let IssueArr = [];\r\n\r\n  if (Array.isArray(data.tasks)) {\r\n    for (let task of data.tasks) IssueArr = [...IssueArr, ...task.issues];\r\n  } else {\r\n    const { issues } = data.task;\r\n    IssueArr = [...issues];\r\n  }\r\n\r\n  return IssueArr;\r\n};\r\nexport const getId = data => {\r\n  if (Array.isArray(data.tasks)) return data.tasks[0].id;\r\n  else return data.task.id;\r\n};\r\n","import React from 'react';\r\nimport Category from '../../components/category/category';\r\nimport { filterTasksByCategory } from '../../helper/helper-functions';\r\nimport './homepage.style.scss';\r\nconst homepage = ({ tasks }) => {\r\n  const { open, active, finished, closed } = filterTasksByCategory(tasks);\r\n\r\n  return (\r\n    <div className=\"homepage_container\">\r\n      <Category tasks={open} name=\"Open\" />\r\n      <Category tasks={active} name=\"Active\" />\r\n      <Category tasks={finished} name=\"Finished\" />\r\n      <Category tasks={closed} name=\"Closed\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default homepage;\r\n","import React from 'react';\r\nimport './loader.style.scss';\r\nconst loader = () => {\r\n  return <div className=\"spinner\"></div>;\r\n};\r\n\r\nexport default loader;\r\n","import React from 'react';\r\nimport './error.styles.scss';\r\nimport CustomBtn from '../button/button';\r\nconst error = ({ error }) => {\r\n  console.log(error);\r\n  return (\r\n    <div className=\"error_container\">\r\n      <h1 className=\"error_header\">OPPS! Something went wrong!</h1>\r\n      <h2 className=\"error_body\">Tip: \"Check the console to view the Error\"</h2>\r\n      <CustomBtn isLink={true} location={'/'}>\r\n        Go Back to the Homepage\r\n      </CustomBtn>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default error;\r\n","import React from 'react';\r\nimport { GET_TASKS_QUERY } from '../../graphql/queries';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Homepage from './homepage';\r\n\r\n//  Loader & Error\r\nimport Loader from '../../components/loader/loader';\r\nimport Error from '../../components/error/error';\r\nconst HomepageContainer = () => {\r\n  const { error, loading, data } = useQuery(GET_TASKS_QUERY);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <Error error={error} />;\r\n\r\n  const { tasks } = data;\r\n  return <Homepage tasks={tasks} />;\r\n};\r\n\r\nexport default HomepageContainer;\r\n","import React from 'react';\r\nimport CustomButton from '../button/button';\r\nimport './single-issue.style.scss';\r\nconst SingleIssue = ({\r\n  name,\r\n  description,\r\n  isOpen,\r\n  closeIssueExec,\r\n  id,\r\n  query,\r\n  taskId\r\n}) => {\r\n  return (\r\n    <div\r\n      className={\r\n        isOpen\r\n          ? 'single-issue-container__open'\r\n          : 'single-issue-container__closed'\r\n      }\r\n    >\r\n      {!isOpen && (\r\n        <div className=\"issue-component-overlay\">\r\n          <h1 className=\"overlay-txt\">Closed</h1>\r\n        </div>\r\n      )}\r\n      <div className=\"single-issue-header\">\r\n        <h2 className=\"single-issue-head\">Issue name:{name}</h2>\r\n        <h2 className=\"single-issue-status__body\">\r\n          Issue Status:{isOpen ? 'Open' : 'Closed'}\r\n        </h2>\r\n      </div>\r\n      <div className=\"single-issue-body\">{description}</div>\r\n      <div className=\"single-issue-footer\">\r\n        <h1 className=\"single-issue-status__footer\">Close Issue:</h1>\r\n        {isOpen ? (\r\n          <CustomButton\r\n            isLink={false}\r\n            executable={() => closeIssueExec(id, query, taskId)}\r\n          >\r\n            Close Issue\r\n          </CustomButton>\r\n        ) : (\r\n          <h1>Closed</h1>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SingleIssue;\r\n","import React from 'react';\r\nimport SingleIssue from './single-issue';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { CLOSE_SPECIFIC_ISSUE } from '../../graphql/queries';\r\nconst SingleIssueContainer = props => {\r\n  const [CloseIssue] = useMutation(CLOSE_SPECIFIC_ISSUE);\r\n  const closeIssueExec = (id, query, taskId) => {\r\n    CloseIssue({\r\n      variables: { id },\r\n      refetchQueries: [{ query: query, variables: { id: taskId } }]\r\n    });\r\n  };\r\n  return <SingleIssue closeIssueExec={closeIssueExec} {...props} />;\r\n};\r\n\r\nexport default SingleIssueContainer;\r\n","import React from 'react';\r\n\r\nimport './issue.style.scss';\r\nimport SingleIssue from '../../components/issue/single-issue-container';\r\nimport Empty from '../../components/empty/empty';\r\nimport CustomButton from '../../components/button/button';\r\nconst Issue = ({ taskId, issues, query, isAddVisiable }) => {\r\n  \r\n\r\n\r\n  return (\r\n    <div className=\"issue-page-container\">\r\n      <h1 className=\"issue-page-header\">All current Issues</h1>\r\n      <div className=\"issue-page-body\">\r\n        {issues.length > 0 ? (\r\n          issues.map((issue, i) => (\r\n            <SingleIssue query={query} {...issue} key={i} />\r\n          ))\r\n        ) : (\r\n          <Empty>Issues</Empty>\r\n        )}\r\n      </div>\r\n\r\n      {isAddVisiable && (\r\n        <div className=\"issue-page-footer\">\r\n          <CustomButton isLink={true} location={`/add/${taskId}`}>\r\n            Add new Issue\r\n          </CustomButton>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Issue;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport {\r\n  returnIssueQuery,\r\n  getAllIssues,\r\n  getId\r\n} from '../../helper/helper-functions';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport Issue from './issue';\r\n//  Loader & Error\r\nimport Loader from '../../components/loader/loader';\r\nimport Error from '../../components/error/error';\r\nconst IssueContainer = props => {\r\n  const { query, id } = returnIssueQuery(props.location.pathname);\r\n  const { error, loading, data } = useQuery(query, { variables: { id } });\r\n  if (loading) return <Loader />;\r\n  if (error) return <Error error={error} />;\r\n  return (\r\n    <Issue\r\n      query={query}\r\n      taskId={getId(data)}\r\n      isAddVisiable={id === '' ? false : true}\r\n      issues={getAllIssues(data)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default withRouter(IssueContainer);\r\n","import React from 'react';\r\nimport './input.styles.scss';\r\nconst input = ({\r\n  inputColor,\r\n  isTextarea,\r\n  handleChange,\r\n  label,\r\n  name,\r\n  ...otherProps\r\n}) => {\r\n  return (\r\n    <div className=\"form-input__container\">\r\n      <label className=\"label\" htmlFor={name}>\r\n        {label}\r\n      </label>\r\n      <br />\r\n      {!isTextarea ? (\r\n        <input\r\n          className=\"form-input__input\"\r\n          style={{ borderBottom: `2px solid ${inputColor}` }}\r\n          type=\"text\"\r\n          name={name}\r\n          onChange={handleChange}\r\n          {...otherProps}\r\n        />\r\n      ) : (\r\n        <textarea\r\n          onChange={handleChange}\r\n          style={{ border: `2px solid ${inputColor}` }}\r\n          className=\"form-input__textarea\"\r\n          name={name}\r\n          {...otherProps}\r\n        ></textarea>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","import React, { useState } from 'react';\r\nimport CustomBtn from '../button/button';\r\nimport FormInput from '../input/input';\r\nimport './add-issue.style.scss';\r\nconst AddIssue = ({ color, OpenIssue, taskId, query }) => {\r\n  const [name, setName] = useState('');\r\n  const [desc, setDesc] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    if (name === 'name') setName(value);\r\n    if (name === 'desc') setDesc(value);\r\n  };\r\n\r\n  const openIss = () => {\r\n    if (name === '' || desc === '') {\r\n      alert('You need to enter both fields');\r\n      return;\r\n    }\r\n    const obj = {\r\n      name,\r\n      description: desc,\r\n      isOpen: true,\r\n      taskId: taskId,\r\n      query\r\n    };\r\n\r\n    OpenIssue(obj);\r\n\r\n    setName('');\r\n    setDesc('');\r\n  };\r\n  return (\r\n    <div className=\"add-issue-container\">\r\n      <FormInput\r\n        inputColor={color}\r\n        label=\"Issue name:\"\r\n        placeholder=\"Add the Name of the Issue\"\r\n        name=\"name\"\r\n        isTextarea={false}\r\n        handleChange={handleChange}\r\n        value={name}\r\n      />\r\n      <br />\r\n      <FormInput\r\n        inputColor={color}\r\n        label=\"Issue description:\"\r\n        placeholder=\"Add the Issue Description\"\r\n        name=\"desc\"\r\n        isTextarea={true}\r\n        handleChange={handleChange}\r\n        value={desc}\r\n      />\r\n      <CustomBtn isLink={false} executable={openIss}>\r\n        Add Issue\r\n      </CustomBtn>\r\n      <CustomBtn isLink={true} location=\"/issues\">\r\n        View All Issues\r\n      </CustomBtn>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddIssue;\r\n","import React from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport AddIssue from './add-issue';\r\nimport {\r\n  GET_SPECIFIC_ISSUE_QUERY,\r\n  OPEN_NEW_ISSUE\r\n} from '../../graphql/queries';\r\nconst AddIssueContainer = ({ color, taskId }) => {\r\n  const [OpenIssue] = useMutation(OPEN_NEW_ISSUE);\r\n\r\n  const OpenIssueExec = variableObj => {\r\n    const { query, name, description, isOpen, taskId } = variableObj;\r\n    OpenIssue({\r\n      variables: { name, description, isOpen, taskId },\r\n      refetchQueries: [{ query, variables: { id: taskId } }]\r\n    });\r\n  };\r\n  return (\r\n    <AddIssue\r\n      color={color}\r\n      OpenIssue={OpenIssueExec}\r\n      taskId={taskId}\r\n      query={GET_SPECIFIC_ISSUE_QUERY}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AddIssueContainer;\r\n","import React, { useState } from 'react';\r\nimport './add-task.style.scss';\r\nimport CustomBtn from '../button/button';\r\nimport FormInput from '../input/input';\r\nconst AddTask = ({ color, query, OpenTaskExec }) => {\r\n  const [name, setName] = useState('');\r\n  const [desc, setDesc] = useState('');\r\n  const [username, setUsername] = useState('');\r\n\r\n  const execute = () => {\r\n    if (desc === '' || name === '' || username === '') {\r\n      alert('You need to fill in all fields');\r\n      return;\r\n    }\r\n    const object = {\r\n      name,\r\n      openedBy: username,\r\n      description: desc,\r\n      status: 'open',\r\n      isOpen: true,\r\n      query: query\r\n    };\r\n    OpenTaskExec(object);\r\n    setName('');\r\n    setDesc('');\r\n    setUsername('');\r\n  };\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n    if (name === 'name') setName(value);\r\n    if (name === 'desc') setDesc(value);\r\n    if (name === 'user') setUsername(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"task-container\">\r\n      <FormInput\r\n        inputColor={color}\r\n        label=\"Task Name:\"\r\n        placeholder=\"Add the name of the task\"\r\n        name=\"name\"\r\n        isTextarea={false}\r\n        handleChange={handleChange}\r\n        value={name}\r\n      />\r\n      <br />\r\n      <FormInput\r\n        inputColor={color}\r\n        label=\"Task Desciption:\"\r\n        placeholder=\"Add the description of the task\"\r\n        name=\"desc\"\r\n        isTextarea={true}\r\n        handleChange={handleChange}\r\n        value={desc}\r\n      />\r\n      <br />\r\n      <FormInput\r\n        inputColor={color}\r\n        label=\"Task Master:\"\r\n        name=\"user\"\r\n        placeholder=\"Add the username of the taskmaster\"\r\n        isTextarea={false}\r\n        handleChange={handleChange}\r\n        value={username}\r\n      />\r\n      <CustomBtn isLink={false} executable={execute}>\r\n        Add Task\r\n      </CustomBtn>\r\n      <CustomBtn isLink={true} location=\"/\">\r\n        View All Tasks\r\n      </CustomBtn>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTask;\r\n","import React from 'react';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport AddTask from './add-task';\r\nimport { GET_TASKS_QUERY, OPEN_NEW_TASK } from '../../graphql/queries';\r\nconst AddTaskContainer = ({ color }) => {\r\n  const [OpenTask] = useMutation(OPEN_NEW_TASK);\r\n  const OpenTaskExec = variableObj => {\r\n    const { name, openedBy, description, status, isOpen, query } = variableObj;\r\n    OpenTask({\r\n      variables: { name, openedBy, description, status, isOpen },\r\n      refetchQueries: [{ query }]\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AddTask\r\n      color={color}\r\n      query={GET_TASKS_QUERY}\r\n      OpenTaskExec={OpenTaskExec}\r\n    />\r\n  );\r\n};\r\n\r\nexport default AddTaskContainer;\r\n","import React from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { getLastArg } from '../../helper/helper-functions';\r\nimport AddIssue from '../../components/add-issue/add-issue-container';\r\nimport AddTask from '../../components/add-task/add-task-container';\r\nconst AddPage = props => {\r\n  const Route = getLastArg(props.location.pathname);\r\n\r\n  return (\r\n    <>\r\n      {Route === 'add' ? (\r\n        <AddTask color=\"royalblue\" />\r\n      ) : (\r\n        <AddIssue color=\"firebrick\" taskId={Route} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(AddPage);\r\n","import React from 'react';\r\nimport CustomButton from '../button/button';\r\nimport './header.style.scss';\r\nconst header = () => {\r\n  return (\r\n    <div className=\"header-component_container\">\r\n      <h1 className=\"header-component_left\">Scrumpad</h1>\r\n\r\n      <div className=\"header-component_right\">\r\n        <CustomButton isLink={true} location=\"/\">\r\n          Home Page\r\n        </CustomButton>\r\n        <CustomButton isLink={true} location=\"/issues\">\r\n          All Issues\r\n        </CustomButton>\r\n        <CustomButton isLink={true} location=\"/add\">\r\n          Add Task\r\n        </CustomButton>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default header;\r\n","import React from \"react\";\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport ApolloClient from \"apollo-boost\";\r\n\r\n//  Components\r\nimport Homepage from \"./pages/homepage/homepage-container\";\r\nimport Issuepage from \"./pages/issues/issue-container\";\r\nimport Addpage from \"./pages/add/addpage\";\r\nimport Header from \"./components/header/header\";\r\n//  Apollo setup\r\nconst Client = new ApolloClient({\r\n  uri: \"https://scrumpad-backend.herokuapp.com/graphql\",\r\n});\r\n\r\n//  App\r\nconst App = () => {\r\n  return (\r\n    <ApolloProvider client={Client}>\r\n      <Router>\r\n        <Header />\r\n        <Route exact path=\"/\" component={Homepage} />\r\n        <Route path=\"/issues\" component={Issuepage} />\r\n        <Route path=\"/add\" component={Addpage} />\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './global.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}